export default WeavyPromiseWrapper;
/**
 * Unifying wrapper for deferred promises.
 * Works both as a traditional promise and a deferred promise.
 * Use promise.reset() to replace the promise with a new promise.
 * Use the promise as a function (or via .promise()) to return the actual promise.
 *
 * @example
 * // Traditional style promise
 * new WeavyPromise(function(resolve, reject) {
 *     resolve()
 * }).then(function() {
 *     console.log("resolved");
 * })
 *
 * @example
 * // jQuery deferred style promise
 * var myPromise = new WeavyPromise();
 *
 * // as variable
 * myPromise.then(function() {
 *     console.log("resolved")
 * });
 *
 * // or as function()
 * myPromise().then(function() {
 *     console.log("resolved")
 * });
 *
 * myPromise.resolve();
 *
 * @class WeavyPromise
 * @classdesc Unified promises that can be reset
 * @param {function} executor - Function to be executed while constructing the promise
 * @returns {Promise} - A function that acts as the deferred or returns the promise when called
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises}
 **/
declare function WeavyPromiseWrapper(executor: Function): Promise<any>;
declare class WeavyPromiseWrapper {
    /**
     * Unifying wrapper for deferred promises.
     * Works both as a traditional promise and a deferred promise.
     * Use promise.reset() to replace the promise with a new promise.
     * Use the promise as a function (or via .promise()) to return the actual promise.
     *
     * @example
     * // Traditional style promise
     * new WeavyPromise(function(resolve, reject) {
     *     resolve()
     * }).then(function() {
     *     console.log("resolved");
     * })
     *
     * @example
     * // jQuery deferred style promise
     * var myPromise = new WeavyPromise();
     *
     * // as variable
     * myPromise.then(function() {
     *     console.log("resolved")
     * });
     *
     * // or as function()
     * myPromise().then(function() {
     *     console.log("resolved")
     * });
     *
     * myPromise.resolve();
     *
     * @class WeavyPromise
     * @classdesc Unified promises that can be reset
     * @param {function} executor - Function to be executed while constructing the promise
     * @returns {Promise} - A function that acts as the deferred or returns the promise when called
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises}
     **/
    constructor(executor: Function);
}
declare namespace WeavyPromiseWrapper {
    /**
     * Return an instantly resolved WeavyPromise
     *
     * @example
     * function doSomething() {
     *    return WeavyPromise.resolve(1234);
     * }
     *
     * @name WeavyPromise.resolve
     * @function
     * @param {any} value
     */
    function resolve(value: any): any;
    /**
     * Return an instantly rejected WeavyPromise
     *
     * @example
     * function doSomething() {
     *    return WeavyPromise.reject({ errorcode: 404 });
     * }
     *
     * @name WeavyPromise.reject
     * @function
     * @param {any} value
     */
    function reject(value: any): any;
}
