/**
 * Generate a S4 alphanumeric 4 character sequence suitable for non-sensitive GUID generation etc.
 */
export function S4(): string;
/**
 * Parse any HTML string into a HTMLCollection. Use parseHTML(html)[0] to get the first HTMLElement.
 *
 * @param {any} html
 * @returns {HTMLCollection} List of all parsed HTMLElements
 */
export function parseHTML(html: any): HTMLCollection;
/**
 * Checks if an object is an object.
 *
 * @param {any} maybeObject - The object to check
 * @returns {boolean} True if the object is an object
 */
export function isObject(maybeObject: any): boolean;
/**
 * Checks if an object is a plain object {}, similar to jQuery.isPlainObject()
 *
 * @param {any} maybePlainObject - The object to check
 * @returns {boolean} True if the object is plain
 */
export function isPlainObject(maybePlainObject: any): boolean;
/**
 * Check if an object is a jquery collection containing at least one item.
 *
 * @param {any} maybeJQuery
 * @returns {boolean} True if object is jQuery containing at least one item
 */
export function isJQuery(maybeJQuery: any): boolean;
/**
 * Method for extending plainObjects/options, similar to Object.assign() but with deep/recursive merging. If the recursive setting is applied it will merge any plain object children. Note that Arrays are treated as data and not as tree structure when merging.
 *
 * The original options passed are left untouched.
 *
 * @param {Object} source - Original options.
 * @param {Object} properties - Merged options that will replace options from the source.
 * @param {boolean} [recursive=false] True will merge any sub-objects of the options recursively. Otherwise sub-objects are treated as data.
 * @returns {Object} A new object containing the merged options.
 */
export function assign(source: Object, properties: Object, recursive?: boolean | undefined): Object;
/**
 * Always returns an Array.
 *
 * @example
 * asArray(1); // [1]
 * asArray([1]); // [1]
 *
 * @param {any} maybeArray
 * @returns {Array}
 */
export function asArray(maybeArray: any): any[];
/**
 * Returns an element from an HTMLElement, string query selector, html string or jquery element
 *
 * @param {any} elementOrSelector
 * @returns {HTMLElement}
 */
export function asElement(elementOrSelector: any): HTMLElement;
/**
 * Case insensitive string comparison
 *
 * @param {any} str1 - The first string to compare
 * @param {any} str2 - The second string to compare
 * @param {boolean} ignoreType - Skipe type check and use any stringified value
 * @returns {boolean}
 */
export function eqString(str1: any, str2: any, ignoreType: boolean): boolean;
/**
 * Compares two jQuery objects.
 *
 * @param {any} a - The first jQuery object to compare
 * @param {any} b - The second jQuery object to compare
 * @returns {boolean}
 */
export function eqJQuery(a: any, b: any): boolean;
/**
 * Compares two plain objects. Compares all the properties in a to any properties in b.
 *
 * @param {any} a - The plain object to compare with b
 * @param {any} b - The plain object to compare properties from a to
 * @param {any} skipLength - Do not compare the number of properties
 * @returns {boolean}
 */
export function eqObjects(a: any, b: any, skipLength: any): boolean;
/**
 * Removes HTMLElement and Node from object before serializing. Used with JSON.stringify().
 *
 * @example
 * var jsonString = JSON.stringify(data, sanitizeJSON);
 *
 * @param {string} key
 * @param {any} value
 * @returns {any} - Returns the value or undefined if removed.
 */
export function sanitizeJSON(key: string, value: any): any;
/**
 * Changes a string to snake_case from camelCase, PascalCase and spinal-case/kebab-case.
 *
 * @param {string} str - The string to change to snake case
 * @returns {string} The processed string as snake_case
 */
export function toSnakeCase(str: string): string;
/**
 * Changes a string to kebab-case/spinal-case from camelCase, PascalCase and snake_case.
 *
 * @param {string} str - The string to change to kebab case
 * @returns {string} The processed string as kebab-case
 */
export function toKebabCase(str: string): string;
/**
 * Changes a string to camelCase from PascalCase, spinal-case and snake_case.
 *
 * @param {string} str - The string to change to camel case
 * @param {boolean} pascal - Make ste string PascalCase
 * @returns {string} The processed string as camelCase or PascalCase
 */
export function toCamelCase(str: string, pascal: boolean): string;
/**
 * Changes all object keys recursively to camelCase from PascalCase, spinal-case and snake_case.
 *
 * @param {Object} obj - The object containing keys to process
 * @param {boolean} pascal - Make keys PascalCase
 * @returns {Object} The processed object with any camelCase or PascalCase keys
 */
export function keysToCamelCase(obj: Object, pascal: boolean): Object;
/**
 * Changes all object keys recursively to PascalCase from camelCase, spinal-case and snake_case.
 *
 * @param {Object} obj - The object containing keys to process
 * @returns {Object} The processed object with any PascalCase keys
 */
export function keysToPascalCase(obj: Object): Object;
/**
 * Serializes a form to an object with data.
 *
 * @param {HTMLFormElement} form - The form to serialize
 * @param {boolean} snake_case - Use snake case for property names
 * @returns {Object}
 */
export function serializeObject(form: HTMLFormElement, snake_case: boolean): Object;
/**
 * Processing of JSON in a fetch response
 *
 * @param {external:Response} response - The fetch response to parse
 * @returns {Object|Response} The data if sucessful parsing, otherwise the response or an rejected error
 */
export function processJSONResponse(response: any): Object | Response;
export function storageAvailable(type: any): boolean | undefined;
/**
 * Stores data for the current domain in the weavy namespace.
 *
 * @category options
 * @param {string} key - The name of the data
 * @param {data} value - Data to store
 * @param {boolean} [asJson=false] - True if the data in value should be stored as JSON
 */
export function storeItem(key: string, value: data, asJson?: boolean | undefined, type: any): void;
/**
 * Retrieves data for the current domain from the weavy namespace.
 *
 * @category options
 * @param {string} key - The name of the data to retrieve
 * @param {boolean} [isJson=false] - True if the data shoul be decoded from JSON
 * @returns {any}
 */
export function retrieveItem(key: string, isJson?: boolean | undefined, type: any): any;
/**
 * Same as jQuery.ready()
 *
 * @param {Function} fn
 */
export function ready(fn: Function): void;
/**
 * Parses a hex color to rgb
 *
 * @param {string} hex - Hex color string #112233
 * @returns Array<number>
 */
export function HEXToRGB(hex: string): number[];
/**
 * Convert rgb color to hsl
 *
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @returns Array<number>
 */
export function RGBToHSL(r: number, g: number, b: number): number[];
/**
 * Concatenate className strings
 *
 * @param {string} classNames - Strings with space-separeated classNames
 * @returns string
 */
export function classNamesConcat(...classNames: string): string;
